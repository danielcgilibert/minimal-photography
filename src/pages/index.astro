---
// import Image from '../components/Image.astro'
import Layout from '../layouts/Layout.astro'
import Image from '../components/Image.astro'

const images = await Astro.glob('../../public/images/*')
const imgRoutes = images.map(image => image.default.split('/public/').at(-1))
const sizeArray = 3
const newArray = []
for (let i = 0; i < imgRoutes.length; i += sizeArray) {
	newArray.push(imgRoutes.slice(i, i + sizeArray))
}
---

<Layout title="Welcome to Astro.">
	<main class="grid [&>*]:p-5 [&>*]:md:p-[100px]">
		<header>
			<p class="antialiased text-[32px] md:text-[50px] leading-[1.3]">
				Noel is a photographer & filmmmaker
				<span class="md:block"> based in Amsterdam, The Netherlands.</span>
			</p>
		</header>

		<section class="grid-images grid gap-[10px]">
			{
				newArray?.map((subArray, index) => {
					return (
						<div
							class={`grid md:grid-cols-7 gap-2 ${
								index % 2 === 0 ? 'par' : 'inpar'
							} `}>
							{subArray.map((imgRoute, index) => (
								<Image animationDelay={index + 1} src={`${imgRoute}`} />
							))}
						</div>
					)
				})
			}
		</section>
	</main>
</Layout>

<script>
	console.log('asd')
	const img = document.querySelectorAll('img')

	const callback = (entries, observer) => {
		console.log(entries)

		entries.forEach(entry => {
			if (entry.isIntersecting) {
				entry.target.style.animationDelay =
					Number(entry.target.getAttribute('data-animation-offset') / 3) + 's'

				entry.target.classList.add('fadeIn')
			}
		})
	}
	const options = {}

	const myObserver = new IntersectionObserver(callback, options)
	img.forEach(img => {
		myObserver.observe(img)
	})
</script>
